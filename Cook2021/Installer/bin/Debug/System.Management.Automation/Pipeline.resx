<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="WriteToClosedPipeline" xml:space="preserve">
    <value>The WriteObject and WriteError methods cannot be called after the pipeline has been closed. Please contact Microsoft Support Services.</value>
  </data>
  <data name="PipelineExecutionTerminatingError" xml:space="preserve">
    <value>TerminatingError({0}): "{1}"</value>
  </data>
  <data name="PipelineExecutionParameterBinding" xml:space="preserve">
    <value>ParameterBinding({0}): name="{1}"; value="{2}"</value>
  </data>
  <data name="WriteNotPermitted" xml:space="preserve">
    <value>The WriteObject and WriteError methods cannot be called from outside the overrides of the BeginProcessing, ProcessRecord, and EndProcessing methods, and only from that same thread. Validate that the cmdlet makes these calls correctly, or please contact Microsoft Support Services.</value>
  </data>
  <data name="PipelineNotStarted" xml:space="preserve">
    <value>Cannot complete pipeline execution because it hasn't been started yet. You must call the Begin() method before calling End() on a steppable pipeline.</value>
  </data>
  <data name="FirstCommandCannotHaveInput" xml:space="preserve">
    <value>Cannot execute the pipeline because the first cmdlet in the pipeline is trying to read input from a previous cmdlet. Either modify the first cmdlet, remove the first cmdlet, or add the cmdlet whose output is needed by the first cmdlet, then execute the pipeline again.</value>
  </data>
  <data name="PipelineExecuteRequiresAtLeastOneCommand" xml:space="preserve">
    <value>Cannot execute pipeline because there are no commands. Add at least one command to the pipeline and execute it again.</value>
  </data>
  <data name="ActionPreferenceStop" xml:space="preserve">
    <value>Cannot continue to execute cmdlet because all cmdlet execution was stopped by the Stop policy. Determine why cmdlet execution was stopped.</value>
  </data>
  <data name="InvalidCommandNumber" xml:space="preserve">
    <value>Cannot process the cmdlet number. The ReadFromCommand function must specify the Id of a cmdlet that has already been added to the pipeline. Please contact Microsoft Support Services.</value>
  </data>
  <data name="PipeAlreadyTaken" xml:space="preserve">
    <value>Cannot read the output specified by the ReadFromCommand and ReadErrorQueue functions because another cmdlet is already reading that output. Please contact Microsoft Support Services.</value>
  </data>
  <data name="PipelineExecutionNonTerminatingError" xml:space="preserve">
    <value>NonTerminatingError({0}): "{1}"</value>
  </data>
  <data name="CannotCreatePipeline" xml:space="preserve">
    <value>An error occurred creating the pipeline</value>
  </data>
  <data name="ExecutionAlreadyStarted" xml:space="preserve">
    <value>Cannot perform the operation because the pipeline is started. Stop the pipeline and try the operation again.</value>
  </data>
  <data name="PipelineExecutionInformation" xml:space="preserve">
    <value>Information({0}): "{1}"</value>
  </data>
  <data name="SecondFailure" xml:space="preserve">
    <value>A cmdlet threw an exception after calling ThrowTerminatingError.
The first exception was "{0}" with stack trace "{1}".
The second exception was "{2}" with stack trace "{3}". Determine why these exception were thrown and try again.</value>
  </data>
  <data name="CommandProcessorAlreadyUsed" xml:space="preserve">
    <value>Cannot process the cmdlet instance because the cmdlet instances is being used by another pipeline. Please contact Microsoft Support Services.</value>
  </data>
</root>