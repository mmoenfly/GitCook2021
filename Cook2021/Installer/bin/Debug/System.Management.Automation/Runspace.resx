<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="NoPipelineWhenSessionStateProxyInProgress" xml:space="preserve">
    <value>Pipeline cannot be invoked while a SessionStateProxy method call is in progress.</value>
  </data>
  <data name="NoCommandInPipeline" xml:space="preserve">
    <value>Pipeline doesn't contain any command.</value>
  </data>
  <data name="ParameterNameOrValueNeeded" xml:space="preserve">
    <value>Parameter name or value must be specified.</value>
  </data>
  <data name="ChangePropertyAfterOpen" xml:space="preserve">
    <value>This property cannot be changed after the runspace has been opened.</value>
  </data>
  <data name="PipelineReInvokeNotAllowed" xml:space="preserve">
    <value>Cannot invoke pipeline because it has been invoked earlier.</value>
  </data>
  <data name="InvalidValueMyResult" xml:space="preserve">
    <value>Valid value for parameter is PipelineResultTypes.Error.</value>
  </data>
  <data name="RunspaceCloseInvalidWhileSessionStateProxy" xml:space="preserve">
    <value>Runspace cannot be closed while a SessionStateProxy method call is in progress.</value>
  </data>
  <data name="NestedPipelineNoParentPipeline" xml:space="preserve">
    <value>Nested pipeline should execute only from a running pipeline.</value>
  </data>
  <data name="RunspaceNotOpenForPipeline" xml:space="preserve">
    <value>Cannot invoke pipeline because runspace is not in the Opened state. Current state of runspace is '{0}'.</value>
  </data>
  <data name="ConcurrentInvokeNotAllowed" xml:space="preserve">
    <value>Pipeline not executed because a pipeline is already executing. Pipelines cannot be executed concurrently.</value>
  </data>
  <data name="CannotOpenAgain" xml:space="preserve">
    <value>Cannot open runspace because runspace is not in the BeforeOpen state. Current state of runspace is '{0}'.</value>
  </data>
  <data name="InvalidRunspaceStateGeneral" xml:space="preserve">
    <value>State of runspace is not valid for this operation.</value>
  </data>
  <data name="RunspaceNotInOpenedState" xml:space="preserve">
    <value>Cannot perform operation because runspace is not in the Opened state. Current state of runspace is '{0}'.</value>
  </data>
  <data name="InvalidPipelineStateStateGeneral" xml:space="preserve">
    <value>State of pipeline is not valid for this operation.</value>
  </data>
  <data name="InvalidValueToResult" xml:space="preserve">
    <value>Valid value for parameter is PipelineResultTypes.Output.</value>
  </data>
  <data name="NestedPipelineInvokeAsync" xml:space="preserve">
    <value>Nested pipeline cannot be invoked asynchronously. Use Invoke method.</value>
  </data>
  <data name="NoSessionStateProxyWhenPipelineInProgress" xml:space="preserve">
    <value>A pipeline is already executing. Concurrent SessionStateProxy method call is not allowed.</value>
  </data>
  <data name="UseLocalScopeNotAllowed" xml:space="preserve">
    <value>{0} cannot be false when language mode is {1} or {2}.</value>
  </data>
  <data name="InvalidThreadOptionsChange" xml:space="preserve">
    <value>The thread options can only be changed if the apartment state is MTA, the current options are UseNewThread or UseCurrentThread and the new value is ReuseThread.</value>
  </data>
  <data name="ErrorLoadingModulesOnRunspaceOpen" xml:space="preserve">
    <value>One or more errors occurred processing the module '{0}' specified in the InitialSessionState object used to create this runspace. See the ErrorRecords property for a complete list of errors. The first error was: {1}</value>
  </data>
  <data name="AnotherSessionStateProxyInProgress" xml:space="preserve">
    <value>A SessionStateProxy method call is in progress. Concurrent SessionStateProxy method calls are not allowed.</value>
  </data>
</root>