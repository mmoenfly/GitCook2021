<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="SetPropertyActionFile" xml:space="preserve">
    <value>Set Property File</value>
  </data>
  <data name="ClearContentesourceTemplate" xml:space="preserve">
    <value>Item: {0}</value>
  </data>
  <data name="ClearPropertyActionDirectory" xml:space="preserve">
    <value>Clear Property Directory</value>
  </data>
  <data name="SetPropertyResourceTemplate" xml:space="preserve">
    <value>Item: {0} Property: {1} Value: {2}</value>
  </data>
  <data name="RenameError" xml:space="preserve">
    <value>Cannot rename because the target specified represents a path or device name.</value>
  </data>
  <data name="CopyItemActionFile" xml:space="preserve">
    <value>Copy File</value>
  </data>
  <data name="NewItemActionDirectory" xml:space="preserve">
    <value>Create Directory</value>
  </data>
  <data name="DelimiterError" xml:space="preserve">
    <value>Delimiter cannot be specified when reading the stream a byte at a time.</value>
  </data>
  <data name="RenameItemActionFile" xml:space="preserve">
    <value>Rename File</value>
  </data>
  <data name="RenameItemResourceFileTemplate" xml:space="preserve">
    <value>Item: {0} Destination: {1}</value>
  </data>
  <data name="FileNotFound" xml:space="preserve">
    <value>Cannot process file because file {0} was not found.</value>
  </data>
  <data name="NewItemActionTemplate" xml:space="preserve">
    <value>Destination: {0}</value>
  </data>
  <data name="UnknownType" xml:space="preserve">
    <value>The type is not a known type for the file system. Only "file" and "directory" can be specified.</value>
  </data>
  <data name="ItemNotFound" xml:space="preserve">
    <value>Could not find item {0}.</value>
  </data>
  <data name="CannotClearProperty" xml:space="preserve">
    <value>Property cannot be cleared because the property is not supported. Only the Attributes property can be cleared.</value>
  </data>
  <data name="PropertyNotFound" xml:space="preserve">
    <value>Property {0} does not exist.</value>
  </data>
  <data name="MoveItemResourceFileTemplate" xml:space="preserve">
    <value>Item: {0} Destination: {1}</value>
  </data>
  <data name="CopyError" xml:space="preserve">
    <value>Cannot copy item {0} onto itself.</value>
  </data>
  <data name="CannotRestoreAttributes" xml:space="preserve">
    <value>Cannot restore attributes on item {0}: {1}</value>
  </data>
  <data name="TargetCannotContainDeviceName" xml:space="preserve">
    <value>Cannot process path '{0}' because the the target represents a reserved device name.</value>
  </data>
  <data name="BasePathLengthError" xml:space="preserve">
    <value>Path length too short. The length of path cannot be less than the length of basePath.</value>
  </data>
  <data name="PermissionError" xml:space="preserve">
    <value>Not Enough permission to perform operation.</value>
  </data>
  <data name="RemoveItemActionDirectory" xml:space="preserve">
    <value>Remove Directory</value>
  </data>
  <data name="SetPropertyActionDirectory" xml:space="preserve">
    <value>Set Property Directory</value>
  </data>
  <data name="RenameItemActionDirectory" xml:space="preserve">
    <value>Rename Directory</value>
  </data>
  <data name="RemoveItemActionFile" xml:space="preserve">
    <value>Remove File</value>
  </data>
  <data name="InvokeItemResourceFileTemplate" xml:space="preserve">
    <value>Item: {0}</value>
  </data>
  <data name="ItemDoesNotExist" xml:space="preserve">
    <value>An object at the specified path {0} does not exist.</value>
  </data>
  <data name="DirectoryNotEmpty" xml:space="preserve">
    <value>Directory {0} cannot be removed because it is not empty.</value>
  </data>
  <data name="DirectoryReparsePoint" xml:space="preserve">
    <value>{0} is a NTFS junction point. Use the Force parameter to delete or modify.</value>
  </data>
  <data name="CopyItemResourceFileTemplate" xml:space="preserve">
    <value>Item: {0} Destination: {1}</value>
  </data>
  <data name="MoveItemActionFile" xml:space="preserve">
    <value>Move File</value>
  </data>
  <data name="InvokeItemAction" xml:space="preserve">
    <value>Invoke Item</value>
  </data>
  <data name="DriveRootError" xml:space="preserve">
    <value>Drive root "{0}" does not exist or it's not a folder.</value>
  </data>
  <data name="ClearPropertyActionFile" xml:space="preserve">
    <value>Clear Property File</value>
  </data>
  <data name="AttributesNotSupported" xml:space="preserve">
    <value>The attribute cannot be set because attributes are not supported. Only the following attributes can be set: Archive, Hidden, Normal, ReadOnly, or System.</value>
  </data>
  <data name="CannotRemoveItem" xml:space="preserve">
    <value>Cannot remove item {0}: {1}</value>
  </data>
  <data name="NewItemActionFile" xml:space="preserve">
    <value>Create File</value>
  </data>
  <data name="ByteEncodingError" xml:space="preserve">
    <value>Cannot proceed with byte encoding. When using byte encoding the content must be of type byte.</value>
  </data>
  <data name="CopyItemActionDirectory" xml:space="preserve">
    <value>Copy Directory</value>
  </data>
  <data name="MoveItemActionDirectory" xml:space="preserve">
    <value>Move Directory</value>
  </data>
  <data name="DirectoryDisplayGrouping" xml:space="preserve">
    <value>Directory: </value>
  </data>
  <data name="ClearContentActionFile" xml:space="preserve">
    <value>Clear Content</value>
  </data>
  <data name="ClearPropertyResourceTemplate" xml:space="preserve">
    <value>Item: {0} Property: {1}</value>
  </data>
  <data name="DirectoryExist" xml:space="preserve">
    <value>Item with specified name {0} already exists.</value>
  </data>
  <data name="PathOutSideBasePath" xml:space="preserve">
    <value>Cannot process path because the specified path refers to an item that is outside the basePath.</value>
  </data>
</root>